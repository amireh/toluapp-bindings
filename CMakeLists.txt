CMAKE_MINIMUM_REQUIRED(VERSION 2.8)


IF(NOT DEFINED CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

LIST(APPEND BUILD_TYPE_MSG
    "Choose the type of build, options are:"
    "None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.")
SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "${BUILD_TYPE_MSG}")

INCLUDE (CheckIncludeFileCXX)
INCLUDE (CMakeDependentOption)

PROJECT(tolua++-bindings)

SET(CMAKE_MODULE_PATH
    ${CMAKE_CURRENT_SOURCE_DIR}/CMake
    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Scripts
    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules
    ${CMAKE_MODULE_PATH})

FIND_PACKAGE(Lua51 REQUIRED)
FIND_PACKAGE(toluapp REQUIRED)

INCLUDE_DIRECTORIES ( ${LUA_INCLUDE_DIR} ${TOLUAPP_INCLUDE_DIR} )
LINK_LIBRARIES      ( ${LUA_LIBRARIES} ${TOLUAPP_LIBRARIES} )

SET(LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib")

SET(PACKAGES
    Ogre    "Ogre 1.8"
    OIS     "OIS"
    OgreMax "OgreMax")

MACRO(GENERATE_BINDINGS PACKAGE)
  SET(LIBNAME         "lua${PACKAGE}")
  SET(BINDINGS        "${LIBNAME}_BINDINGS")
  SET(WRAPPER         "${CMAKE_CURRENT_BINARY_DIR}/${LIBNAME}_wrap.cxx")
  SET(CMAKE_CXX_FLAGS "-D TOLUA_API=\"extern \\\"C\\\"\"")

  ADD_CUSTOM_COMMAND(
    OUTPUT  ${WRAPPER}
    COMMAND ${CMAKE_COMMAND}
    ARGS    -E chdir ${CMAKE_CURRENT_SOURCE_DIR} tolua++ -n ${LIBNAME} -o ${WRAPPER} ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE}.pkg
    COMMENT "Generating ${PACKAGE} tolua++ bindings")

  LIST(APPEND SRC ${WRAPPER})

  ADD_LIBRARY(${LIBNAME} SHARED ${SRC})
  TARGET_LINK_LIBRARIES(${LIBNAME} ${LUA_LIBRARIES} ${TOLUAPP_LIBRARIES})

  ADD_CUSTOM_TARGET(${BINDINGS} DEPENDS ${WRAPPER})
  IF(NOT EXISTS "${WRAPPER}")
    MESSAGE(STATUS
      "Lua bindings are not yet generated, forcing generation."
      " Generate manually using make -B ${BINDINGS}")
    ADD_DEPENDENCIES(${LIBNAME} ${BINDINGS})
  ENDIF()

  SET_SOURCE_FILES_PROPERTIES(${WRAPPER} PROPERTIES GENERATED 1)
  SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES PREFIX "")

ENDMACRO()

FOREACH(PKG ${PACKAGES})
  IF(DEFINED PKG_ID)
    SET(IS_ON OFF)
    IF(${PKG_ID} STREQUAL "OIS")
      SET(IS_ON ON)
    ENDIF()

    OPTION("${PKG_ID}_BINDINGS" "Generate ${PKG} bindings" ${IS_ON})

    IF(${PKG_ID}_BINDINGS)
      MESSAGE(STATUS "Will be generating ${PKG_ID} bindings")
      ADD_SUBDIRECTORY(${PKG_ID})
    ENDIF()

    SET(PKG_ID)
  ELSE()
    SET(PKG_ID ${PKG})
  ENDIF()
ENDFOREACH()