/*
 * -----------------------------------------------------------------------------
 * Ogre License
 *
 * Original source file is part of OGRE (Object-oriented Graphics Rendering Engine)
 * For the latest info, see <http://www.ogre3d.org/>
 *
 * Copyright (c) 2000-2012 Torus Knot Software Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * -----------------------------------------------------------------------------
 * tolua++-bindings License
 *
 * This binding "package" is part of tolua++-bindings, a collection of Lua bindings
 * for C++ applications generatable using tolua++. See <https://github.com/amireh/tolua++-bindings>
 *
 * Copyright (c) 2012 Ahmad Amireh <ahmad@amireh.net>
 */

$#include <OGRE/OgrePrerequisites.h>
$#include <OGRE/Ogre.h>

#if OGRE_DOUBLE_PRECISION == 1
  /**
    Software floating point type.
    @note Not valid as a pointer to GPU buffers / parameters
  */
  typedef double Real;
#else
  /**
    Software floating point type.
    @note Not valid as a pointer to GPU buffers / parameters
  */
  typedef float Real;
#endif

typedef Ogre::String                    String;
typedef Ogre::NameValuePairList         NameValuePairList;
typedef Ogre::SharedPtr<Ogre::Resource> ResourcePtr;

namespace Ogre {
  typedef unsigned int    uint;
  typedef unsigned char   uchar;
  typedef unsigned long   ulong;
  typedef unsigned short  ushort;
  typedef char            int8;
  typedef short           int16;
  typedef int             int32;
  typedef unsigned char   uint8;
  typedef unsigned short  uint16;
  typedef unsigned int    uint32;
  typedef uint32          RGBA;
  typedef uint32          ARGB;
  typedef uint32          ABGR;
  typedef uint32          BGRA;

  enum PixelFormat {
    PF_UNKNOWN = 0,
    PF_L8 = 1,
    PF_BYTE_L = PF_L8,
    PF_L16 = 2,
    PF_SHORT_L = PF_L16,
    PF_A8 = 3,
    PF_BYTE_A = PF_A8,
    PF_A4L4 = 4,
    PF_BYTE_LA = 5,
    PF_R5G6B5 = 6,
    PF_B5G6R5 = 7,
    PF_R3G3B2 = 31,
    PF_A4R4G4B4 = 8,
    PF_A1R5G5B5 = 9,
    PF_R8G8B8 = 10,
    PF_B8G8R8 = 11,
    PF_A8R8G8B8 = 12,
    PF_A8B8G8R8 = 13,
    PF_B8G8R8A8 = 14,
    PF_R8G8B8A8 = 28,
    PF_X8R8G8B8 = 26,
    PF_X8B8G8R8 = 27,
  #if OGRE_ENDIAN == OGRE_ENDIAN_BIG
    PF_BYTE_RGB = PF_R8G8B8,
    PF_BYTE_BGR = PF_B8G8R8,
    PF_BYTE_BGRA = PF_B8G8R8A8,
    PF_BYTE_RGBA = PF_R8G8B8A8,
  #else
    PF_BYTE_RGB = PF_B8G8R8,
    PF_BYTE_BGR = PF_R8G8B8,
    PF_BYTE_BGRA = PF_A8R8G8B8,
    PF_BYTE_RGBA = PF_A8B8G8R8,
  #endif
    PF_A2R10G10B10 = 15,
    PF_A2B10G10R10 = 16,
    PF_DXT1 = 17,
    PF_DXT2 = 18,
    PF_DXT3 = 19,
    PF_DXT4 = 20,
    PF_DXT5 = 21,
    PF_FLOAT16_R = 32,
    PF_FLOAT16_RGB = 22,
    PF_FLOAT16_RGBA = 23,
    PF_FLOAT32_R = 33,
    PF_FLOAT32_RGB = 24,
    PF_FLOAT32_RGBA = 25,
    PF_FLOAT16_GR = 35,
    PF_FLOAT32_GR = 36,
    PF_DEPTH = 29,
    PF_SHORT_RGBA = 30,
    PF_SHORT_GR = 34,
    PF_SHORT_RGB = 37,
    PF_PVRTC_RGB2 = 38,
    PF_PVRTC_RGBA2 = 39,
    PF_PVRTC_RGB4 = 40,
    PF_PVRTC_RGBA4 = 41,
    PF_COUNT = 42
  };

  typedef vector<PixelFormat>::type PixelFormatList;

  /**
  * Flags defining some on/off properties of pixel formats
  */
  enum PixelFormatFlags {
    PFF_HASALPHA    = 0x00000001,
    PFF_COMPRESSED    = 0x00000002,
    PFF_FLOAT    = 0x00000004,
    PFF_DEPTH    = 0x00000008,
    PFF_NATIVEENDIAN    = 0x00000010,
    PFF_LUMINANCE    = 0x00000020
  };

  /** Pixel component format */
  enum PixelComponentType {
    PCT_BYTE = 0,
    PCT_SHORT = 1,
    PCT_FLOAT16 = 2,
    PCT_FLOAT32 = 3,
    PCT_COUNT = 4
  };
  enum FogMode
  {
    FOG_NONE,
    FOG_EXP,
    FOG_EXP2,
    FOG_LINEAR
  };
  enum CullingMode
  {
    CULL_NONE = 1,
    CULL_CLOCKWISE = 2,
    CULL_ANTICLOCKWISE = 3
  };
  enum ManualCullingMode
  {
    MANUAL_CULL_NONE = 1,
    MANUAL_CULL_BACK = 2,
    MANUAL_CULL_FRONT = 3
  };
  enum ShadowTechnique
  {
    SHADOWTYPE_NONE = 0x00,
		SHADOWDETAILTYPE_ADDITIVE = 0x01,
		SHADOWDETAILTYPE_MODULATIVE = 0x02,
		SHADOWDETAILTYPE_INTEGRATED = 0x04,
		SHADOWDETAILTYPE_STENCIL = 0x10,
		SHADOWDETAILTYPE_TEXTURE = 0x20,
    SHADOWTYPE_STENCIL_MODULATIVE = 0x12,
    SHADOWTYPE_STENCIL_ADDITIVE = 0x11,
    SHADOWTYPE_TEXTURE_MODULATIVE = 0x22,
    SHADOWTYPE_TEXTURE_ADDITIVE = 0x21,
		SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED = 0x25,
		SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED = 0x26
  };
  enum PolygonMode
  {
    PM_POINTS = 1,
    PM_WIREFRAME = 2,
    PM_SOLID = 3
  };
  enum RenderQueueGroupID
  {
    RENDER_QUEUE_BACKGROUND = 0,
    RENDER_QUEUE_SKIES_EARLY = 5,
    RENDER_QUEUE_1 = 10,
    RENDER_QUEUE_2 = 20,
    RENDER_QUEUE_WORLD_GEOMETRY_1 = 25,
    RENDER_QUEUE_3 = 30,
    RENDER_QUEUE_4 = 40,
    RENDER_QUEUE_MAIN = 50,
    RENDER_QUEUE_6 = 60,
    RENDER_QUEUE_7 = 70,
    RENDER_QUEUE_WORLD_GEOMETRY_2 = 75,
    RENDER_QUEUE_8 = 80,
    RENDER_QUEUE_9 = 90,
    RENDER_QUEUE_SKIES_LATE = 95,
    RENDER_QUEUE_OVERLAY = 100,
    RENDER_QUEUE_MAX = 105
  };
  class Vector2 {
    public:
    Real x,y;
    Vector2( const Real fX, const Real fY );
    Vector2( const Real scalar );
  };
  class Vector3 {
    public:
    Real x, y, z;
    static const Vector3 ZERO;
    static const Vector3 UNIT_X;
    static const Vector3 UNIT_Y;
    static const Vector3 UNIT_Z;
    static const Vector3 NEGATIVE_UNIT_X;
    static const Vector3 NEGATIVE_UNIT_Y;
    static const Vector3 NEGATIVE_UNIT_Z;
    static const Vector3 UNIT_SCALE;
    Vector3( const Real fX, const Real fY, const Real fZ );
    Vector3( const Real scalar );
  };
  class Degree {
    public:
    Degree(float f);
		Real valueDegrees() const;
		Real valueRadians() const;
		Real valueAngleUnits() const;
  };
  class Radian
	{
    public:
		Radian ( Real r=0 );
		Radian ( const Degree& d );
		Real valueDegrees() const;
		Real valueRadians() const;
		Real valueAngleUnits() const;
	};
	class Angle
	{
    public:
		Angle ( Real angle );
		operator Radian() const;
		operator Degree() const;
	};
  class Quaternion {
    public:
		inline Quaternion();
		inline Quaternion(Real fW,	Real fX, Real fY, Real fZ);
    inline Quaternion(const Radian& rfAngle, const Vector3& rkAxis);
    inline Quaternion(const Vector3& xaxis, const Vector3& yaxis, const Vector3& zaxis);
    inline Quaternion(const Vector3* akAxis);
  };
  class ColourValue
  {
    public:
    static const ColourValue ZERO;
    static const ColourValue Black;
    static const ColourValue White;
    static const ColourValue Red;
    static const ColourValue Green;
    static const ColourValue Blue;
    ColourValue( float red = 1.0f,
    float green = 1.0f,
    float blue = 1.0f,
    float alpha = 1.0f );
  };

  class Plane {
    Plane (const Vector3& rkNormal, Real fConstant);
    Plane (Real a, Real b, Real c, Real d);
  };

  class AxisAlignedBox {
		enum Extent
		{
			EXTENT_NULL,
			EXTENT_FINITE,
			EXTENT_INFINITE
		};

		typedef enum {
			FAR_LEFT_BOTTOM = 0,
			FAR_LEFT_TOP = 1,
			FAR_RIGHT_TOP = 2,
			FAR_RIGHT_BOTTOM = 3,
			NEAR_RIGHT_BOTTOM = 7,
			NEAR_LEFT_BOTTOM = 6,
			NEAR_LEFT_TOP = 5,
			NEAR_RIGHT_TOP = 4
		} CornerEnum;

    AxisAlignedBox();
    Vector3 getSize() const;
    Vector3& getMaximum(void) const;
    Vector3& getMinimum(void) const;
    Vector3 getCenter(void) const;
  };

  class SubEntity {
  };

  class MovableObject {
    public:
    void setRenderQueueGroup(uint8 queueID);
    void setRenderQueueGroupAndPriority(uint8 queueID, ushort priority);
    AxisAlignedBox& getBoundingBox(void) const;
    AxisAlignedBox getWorldBoundingBox(bool derive = false) const;
    const String& getMovableType(void) const;
    virtual void setQueryFlags(int flags);
    virtual void setVisibilityFlags(int flags);
    virtual void setUserAny(const Any& anything);
    virtual const Any& getUserAny(void) const;
    void setCastShadows(bool enabled);
    bool getCastShadows(void);
  };
  class Node
  {
    public:
    enum TransformSpace
    {
      TS_LOCAL,
      TS_PARENT,
      TS_WORLD
    };
    const String& getName(void) const;
    virtual Node* getParent(void) const;
    virtual void setPosition(const Vector3& pos);
    Vector3& getPosition() const;
    virtual void setScale(const Vector3& scale);
    virtual void setScale(Real x, Real y, Real z);
    virtual const Vector3 & getScale(void) const;
    virtual Node* createChild(
    const Vector3& translate = Vector3::ZERO,
    const Quaternion& rotate = Quaternion::IDENTITY );
    virtual Node* createChild(const String& name, const Vector3& translate = Vector3::ZERO, const Quaternion& rotate = Quaternion::IDENTITY);
    virtual void addChild(Node* child);
    virtual Node* getChild @ getChildAt(int index) const;
    virtual int numChildren(void) const;
    virtual Node* getChild(const String& name) const;
    virtual Node* removeChild(unsigned short index);
    virtual Node* removeChild(Node* child);
    virtual Node* removeChild(const String& name);
    virtual void removeAllChildren(void);
  };

  class Entity : public MovableObject {
    public:
		SubEntity* getSubEntity(unsigned int index) const;
		SubEntity* getSubEntity( const String& name ) const;
		unsigned int getNumSubEntities(void) const;
    void setDisplaySkeleton(bool display);
    void setMaterialName( const String& name, const String& groupName = ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME );
  };

  class SceneNode : public Node {
    void yaw(const Degree);
    void pitch(const Degree);
    void roll(const Degree);
    virtual void attachObject(MovableObject* obj);
    virtual unsigned short numAttachedObjects(void) const;
    virtual MovableObject* getAttachedObject @ getAttachedObjectAt(unsigned short index);
    virtual MovableObject* getAttachedObject(const String& name);
    virtual MovableObject* detachObject(unsigned short index);
    virtual void detachObject(MovableObject* obj);
    virtual MovableObject* detachObject(const String& name);
    virtual void detachAllObjects(void);
    SceneManager* getCreator(void) const;
    virtual SceneNode* createChildSceneNode( const Vector3& translate = Vector3::ZERO, const Quaternion& rotate = Quaternion::IDENTITY );
    virtual SceneNode* createChildSceneNode(const String& name, const Vector3& translate = Vector3::ZERO, const Quaternion& rotate = Quaternion::IDENTITY);
    virtual void removeAndDestroyChild(const String& name);
    virtual void removeAndDestroyChild(unsigned short index);
    virtual void removeAndDestroyAllChildren(void);
    virtual void showBoundingBox(bool bShow);
    virtual void hideBoundingBox(bool bHide);
    virtual void setDirection( Real x, Real y, Real z, TransformSpace relativeTo = TS_LOCAL, const Vector3& localDirectionVector = Vector3::NEGATIVE_UNIT_Z);
    virtual void setDirection(const Vector3& vec, TransformSpace relativeTo = TS_LOCAL, const Vector3& localDirectionVector = Vector3::NEGATIVE_UNIT_Z);
    virtual void lookAt( const Vector3& targetPoint, TransformSpace relativeTo, const Vector3& localDirectionVector = Vector3::NEGATIVE_UNIT_Z);
    virtual void setAutoTracking( bool enabled, SceneNode* target = 0, const Vector3& localDirectionVector = Vector3::NEGATIVE_UNIT_Z, const Vector3& offset = Vector3::ZERO);
    virtual SceneNode* getAutoTrackTarget(void);
		virtual const Vector3& getAutoTrackOffset(void);
		virtual const Vector3& getAutoTrackLocalDirection(void);
    SceneNode* getParentSceneNode(void) const;
    virtual void setVisible(bool visible, bool cascade = true);
    virtual void flipVisibility(bool cascade = true);
    virtual void setOrientation( const Quaternion& q );
    virtual void setOrientation( Real w, Real x, Real y, Real z);
  };
  class Light : public MovableObject {
    enum LightTypes
    {
      LT_POINT = 0,
      LT_DIRECTIONAL = 1,
      LT_SPOTLIGHT = 2
    };

    Light();
    Light(const String& name);
    virtual ~Light();
    void setType(LightTypes type);
    LightTypes getType(void) const;
    void setDiffuseColour(Real red, Real green, Real blue);
    void setDiffuseColour(const ColourValue& colour);
    const ColourValue& getDiffuseColour(void) const;
    void setSpecularColour(Real red, Real green, Real blue);
    void setSpecularColour(const ColourValue& colour);
    const ColourValue& getSpecularColour(void) const;
    void setAttenuation(Real range, Real constant, Real linear, Real quadratic);
    Real getAttenuationRange(void) const;
    Real getAttenuationConstant(void) const;
    Real getAttenuationLinear(void) const;
    Real getAttenuationQuadric(void) const;
    void setPosition(Real x, Real y, Real z);
    void setPosition(const Vector3& vec);
    const Vector3& getPosition(void) const;
    void setDirection(Real x, Real y, Real z);
    void setDirection(const Vector3& vec);
    const Vector3& getDirection(void) const;
    void setSpotlightRange(const Radian& innerAngle, const Radian& outerAngle, Real falloff = 1.0);
    const Radian& getSpotlightInnerAngle(void) const;
    const Radian& getSpotlightOuterAngle(void) const;
    Real getSpotlightFalloff(void) const;
    void setSpotlightInnerAngle(const Radian& val);
    void setSpotlightOuterAngle(const Radian& val);
    void setSpotlightFalloff(Real val);
		void setPowerScale(Real power);
		Real getPowerScale(void) const;
    const AxisAlignedBox& getBoundingBox(void) const;
    const String& getMovableType(void) const;
    const Vector3& getDerivedPosition(bool cameraRelativeIfSet = false) const;
    const Vector3& getDerivedDirection(void) const;
    void setVisible(bool visible);
  };

  class Camera {
    Camera( const String& name, SceneManager* sm);
    virtual ~Camera();
    SceneManager* getSceneManager(void) const;
    virtual void setAspectRatio(Real ratio);
    virtual void setNearClipDistance(Real nearDist);
    virtual Real getNearClipDistance(void) const;
    virtual void setFarClipDistance(Real farDist);
    virtual Real getFarClipDistance(void) const;
    void setPolygonMode(PolygonMode sd);
    PolygonMode getPolygonMode(void) const;
    void setPosition(Real x, Real y, Real z);
    void setPosition(const Vector3& vec);
    const Vector3& getPosition(void) const;
    void move(const Vector3& vec);
    void moveRelative(const Vector3& vec);
    void setDirection(Real x, Real y, Real z);
    void setDirection(const Vector3& vec);
    Vector3 getDirection(void) const;
    Vector3 getUp(void) const;
    Vector3 getRight(void) const;
    void lookAt( const Vector3& targetPoint );
    void lookAt(Real x, Real y, Real z);
    void roll(const Radian& angle);
    void yaw(const Radian& angle);
    void pitch(const Radian& angle);
    void rotate(const Vector3& axis, const Radian& angle);
    void rotate(const Quaternion& q);
    void setFixedYawAxis( bool useFixed, const Vector3& fixedAxis = Vector3::UNIT_Y );
    const Quaternion& getOrientation(void) const;
    void setOrientation(const Quaternion& q);
    Viewport* getViewport(void) const;
  };
  class StaticGeometry {
    // TODO: wrap
  };
  class InstancedGeometry {
    // TODO: wrap
  };
  class Renderable {
    // TODO: wrap
  };
  class RibbonTrail {
    // TODO: wrap
  };

  class RenderTarget
  {
    struct FrameStats
    {
      float lastFPS;
      float avgFPS;
      float bestFPS;
      float worstFPS;
      unsigned long bestFrameTime;
      unsigned long worstFrameTime;
      size_t triangleCount;
      size_t batchCount;
    };

    virtual const String& getName(void) const;
    virtual void getMetrics(unsigned int& width, unsigned int& height, unsigned int& colourDepth);
    virtual unsigned int getWidth(void) const;
    virtual unsigned int getHeight(void) const;
    virtual unsigned int getColourDepth(void) const;
    void writeContentsToFile(const String& filename);
    virtual String writeContentsToTimestampedFile(const String& filenamePrefix, const String& filenameSuffix);
    virtual Viewport* addViewport(Camera* cam, int ZOrder = 0, float left = 0.0f, float top = 0.0f ,
    float width = 1.0f, float height = 1.0f);
    virtual unsigned short getNumViewports(void) const;
    virtual Viewport* getViewport(unsigned short index);
    virtual Viewport* getViewportByZOrder(int ZOrder);
		virtual bool hasViewportWithZOrder(int ZOrder);
    virtual void removeViewport(int ZOrder);
    virtual void removeAllViewports(void);
    virtual void getStatistics(float& lastFPS, float& avgFPS,  float& bestFPS, float& worstFPS) const;
    virtual const FrameStats& getStatistics(void) const;
    virtual float getLastFPS() const;
    virtual float getAverageFPS() const;
    virtual float getBestFPS() const;
    virtual float getWorstFPS() const;
    virtual float getBestFrameTime() const;
    virtual float getWorstFrameTime() const;
    virtual void resetStatistics(void);
  };
  class RenderWindow : public RenderTarget
  {
    RenderWindow();
    virtual void setFullscreen(bool fullScreen, unsigned int width, unsigned int height);
    virtual void destroy(void) = 0;
    virtual void resize(unsigned int width, unsigned int height);
    virtual void windowMovedOrResized();
    virtual void reposition(int left, int top) = 0;
    virtual bool isVisible(void) const { return true; }
    virtual void setVisible(bool visible);
    virtual bool isHidden(void) const;
    virtual void setHidden(bool hidden);
    virtual void setVSyncEnabled(bool vsync);
    virtual bool isVSyncEnabled() const;
    virtual void setVSyncInterval(unsigned int interval);
    virtual unsigned int getVSyncInterval() const;
    virtual bool isActive(void) const;
    virtual bool isClosed(void) const;
    virtual bool isPrimary(void) const;
    virtual bool isFullScreen(void) const;
    virtual void getMetrics(unsigned int& width, unsigned int& height, unsigned int& colourDepth, int& left, int& top);
    PixelFormat suggestPixelFormat() const;
    bool isDeactivatedOnFocusChange() const;
    void setDeactivateOnFocusChange(bool deactivate);
  };
  class SceneManager {
    enum PrefabType {
      PT_PLANE,
			PT_CUBE,
			PT_SPHERE
    };
    virtual Camera* createCamera(const String& name);
    virtual Camera* getCamera(const String& name) const;
    virtual bool hasCamera(const String& name) const;
    virtual void destroyAllCameras(void);
    virtual void destroyCamera(Camera*);
    virtual Light* createLight(const String& name);
		virtual Light* createLight();
    virtual Light* getLight(const String& name) const;
		virtual bool hasLight(const String& name) const;
    virtual void destroyLight(const String& name);
    virtual void destroyLight(Light*);
    virtual void destroyAllLights(void);
    void setAmbientLight(const ColourValue& colour);
    const ColourValue& getAmbientLight(void) const;
    virtual void setWorldGeometry(const String& filename);
    virtual void clearScene(void);
    virtual SceneNode* createSceneNode(void);
    virtual SceneNode* createSceneNode(const String& name);
    virtual void destroySceneNode(const String& name);
    virtual void destroySceneNode(SceneNode* sn);
    virtual SceneNode* getRootSceneNode(void);
    virtual SceneNode* getSceneNode(const String& name) const;
		virtual bool hasSceneNode(const String& name) const;
    virtual Entity* createEntity( const String& entityName, const String& meshName, const String& groupName = ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME );
    virtual Entity* createEntity(const String& meshName);
    virtual Entity* createEntity @ createPrefabEntity(const String& entityName, PrefabType ptype);
    virtual Entity* getEntity(const String& name) const;
		virtual bool hasEntity(const String& name) const;
    virtual void destroyEntity(Entity* ent);
    virtual void destroyEntity(const String& name);
    virtual void destroyAllEntities(void);
    virtual void setSkyPlane( bool enable, const Plane& plane, const String& materialName, Real scale = 1000, Real tiling = 10, bool drawFirst = true, Real bow = 0, int xsegments = 1, int ysegments = 1, const String& groupName = ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
		virtual void setSkyPlaneEnabled(bool enable);
		virtual bool isSkyPlaneEnabled(void) const;
		virtual SceneNode* getSkyPlaneNode(void) const;
    virtual void setSkyBox(bool enable, const String& materialName, Real distance = 5000, bool drawFirst = true, const Quaternion& orientation = Quaternion::IDENTITY, const String& groupName = ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
		virtual void setSkyBoxEnabled(bool enable);
		virtual bool isSkyBoxEnabled(void) const;
		virtual SceneNode* getSkyBoxNode(void) const;
    virtual void setSkyDome(bool enable, const String& materialName, Real curvature = 10, Real tiling = 8, Real distance = 4000, bool drawFirst = true,const Quaternion& orientation = Quaternion::IDENTITY, int xsegments = 16, int ysegments = 16, int ysegments_keep = -1,const String& groupName = ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
    void setFog(FogMode mode = FOG_NONE, const ColourValue& colour = ColourValue::White,Real expDensity = 0.001, Real linearStart = 0.0, Real linearEnd = 1.0);
    virtual FogMode getFogMode(void) const;
    virtual const ColourValue& getFogColour(void) const;
    virtual Real getFogStart(void) const;
    virtual Real getFogEnd(void) const;
    virtual Real getFogDensity(void) const;
    virtual void setShadowTechnique(ShadowTechnique technique);
    virtual ShadowTechnique getShadowTechnique(void) const;
    virtual void setShadowColour(const ColourValue& colour);
    virtual const ColourValue& getShadowColour(void) const;
    virtual StaticGeometry* createStaticGeometry(const String& name);
		virtual StaticGeometry* getStaticGeometry(const String& name) const;
		virtual bool hasStaticGeometry(const String& name) const;
		virtual void destroyStaticGeometry(StaticGeometry* geom);
		virtual void destroyStaticGeometry(const String& name);
		virtual void destroyAllStaticGeometry(void);
    virtual InstancedGeometry* createInstancedGeometry(const String& name);
		virtual InstancedGeometry* getInstancedGeometry(const String& name) const;
		virtual void destroyInstancedGeometry(InstancedGeometry* geom);
		virtual void destroyInstancedGeometry(const String& name);
		virtual void destroyAllInstancedGeometry(void);
    /*virtual BillboardChain* createBillboardChain(const String& name);
		virtual BillboardChain* createBillboardChain();
    virtual BillboardChain* getBillboardChain(const String& name) const;
		virtual bool hasBillboardChain(const String& name) const;
    virtual void destroyBillboardChain(BillboardChain* obj);
		virtual void destroyBillboardChain(const String& name);
		virtual void destroyAllBillboardChains(void);*/
    virtual RibbonTrail* createRibbonTrail(const String& name);
		virtual RibbonTrail* createRibbonTrail();
    virtual RibbonTrail* getRibbonTrail(const String& name) const;
		virtual bool hasRibbonTrail(const String& name) const;
    virtual void destroyRibbonTrail(RibbonTrail* obj);
		virtual void destroyRibbonTrail(const String& name);
		virtual void destroyAllRibbonTrails(void);
    virtual BillboardSet* createBillboardSet(const String& name, unsigned int poolSize = 20);
    virtual BillboardSet* createBillboardSet(unsigned int poolSize = 20);
    virtual BillboardSet* getBillboardSet(const String& name) const;
		virtual bool hasBillboardSet(const String& name) const;
    virtual void destroyBillboardSet(BillboardSet* set);
    virtual void destroyBillboardSet(const String& name);
    virtual void destroyAllBillboardSets(void);
  };
  class Viewport {
    void getActualDimensions( int &left, int &top, int &width, int &height ) const;
    Camera* getCamera(void) const;
    void setCamera(Camera* cam);
    Real getLeft(void) const;
    Real getTop(void) const;
    Real getWidth(void) const;
    Real getHeight(void) const;
    int getActualLeft(void) const;
    int getActualTop(void) const;
    int getActualWidth(void) const;
    int getActualHeight(void) const;
    void setBackgroundColour(const ColourValue& colour);
    const ColourValue& getBackgroundColour(void) const;
  };
  class MeshPtr {
  };
  class MeshManager {
    static MeshManager& getSingleton(void);
    MeshPtr createPlane(const String& name, const String& groupName, const Plane& plane, Real width, Real height, int xsegments = 1, int ysegments = 1, bool normals = true, unsigned short numTexCoordSets = 1, Real uTile = 1.0f, Real vTile = 1.0f, const Vector3& upVector = Vector3::UNIT_Y);
  };
  class ResourceGroupManager {
    static ResourceGroupManager& getSingleton(void);
		static String DEFAULT_RESOURCE_GROUP_NAME;
    static String INTERNAL_RESOURCE_GROUP_NAME;
		static String AUTODETECT_RESOURCE_GROUP_NAME;
		static size_t RESOURCE_SYSTEM_NUM_REFERENCE_COUNTS;
  };
  class ManualResourceLoader {
  };
  class Resource {
  };
  class ResourceManager {
    virtual void remove(const String& name);
    bool resourceExists(const String& name);
    virtual ResourcePtr prepare( const String& name, const String& group);
    virtual ResourcePtr load( const String& name, const String& group);
  };
  class CompositorInstance {
  };
  class CompositorLogic {
  };
  class CompositorManager {
    void initialise(void);
		CompositorInstance *addCompositor(Viewport *vp, const String &compositor, int addPosition=-1);
		void removeCompositor(Viewport *vp, const String &compositor);
		void setCompositorEnabled(Viewport *vp, const String &compositor, bool value);
		void freePooledTextures(bool onlyIfUnreferenced = true);
		void registerCompositorLogic(const String& name, CompositorLogic* logic);
		void unregisterCompositorLogic(const String& name);
		CompositorLogic* getCompositorLogic(const String& name);
		static CompositorManager& getSingleton(void);
		static CompositorManager* getSingletonPtr(void);
  };
}
